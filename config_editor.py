import sys
import os
import configparser
import tkinter as tk
from tkinter import ttk, messagebox, filedialog

# --- C√°c h·∫±ng s·ªë v√† DISPLAY_NAMES kh√¥ng ƒë·ªïi ---
IMMUTABLE_KEYS = {"server", "host"}
IMMUTABLE_VALUE = "0.0.0.0"

DISPLAY_NAMES = {
    "host": "ƒê·ªãa ch·ªâ IP m√† server WebSocket s·∫Ω l·∫Øng nghe (0.0.0.0 = m·ªçi ƒë·ªãa ch·ªâ)", "port": "C·ªïng WebSocket ch√≠nh m√† server s·ª≠ d·ª•ng", "health_check_port": "C·ªïng ki·ªÉm tra t√¨nh tr·∫°ng server (health-check)",
    "server": "ƒê·ªãa ch·ªâ WebSocket server m√† client k·∫øt n·ªëi", "retry_interval": "Th·ªùi gian gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i n·∫øu m·∫•t k·∫øt n·ªëi (gi√¢y)", "refesh_interval": "T·∫ßn su·∫•t g·ª≠i d·ªØ li·ªáu hi·ªáu nƒÉng (gi√¢y)",
    "update_info_interval": "Chu k·ª≥ g·ª≠i l·∫°i th√¥ng tin ƒë·∫ßy ƒë·ªß (gi√¢y)", "max_event_log": "S·ªë l∆∞·ª£ng log h·ªá th·ªëng l·∫•y t·ªëi ƒëa", "history_limit": "Gi·ªõi h·∫°n s·ªë l·ªãch s·ª≠ tr√¨nh duy·ªát m·ªói profile",
    "clients": "S·ªë client t·ªëi ƒëa hi·ªÉn th·ªã", "records": "S·ªë b·∫£n ghi RAM t·∫°m gi·ªØ", "database_size": "Dung l∆∞·ª£ng DB t·ªëi ƒëa (MB)", "dashboard_refresh_interval": "Chu k·ª≥ c·∫≠p nh·∫≠t dashboard (ms)",
    "server_status_refresh_interval": "Chu k·ª≥ ki·ªÉm tra tr·∫°ng th√°i server (ms)", "client_realtime_metrics_interval": "Chu k·ª≥ l·∫•y s·ªë li·ªáu client (ms)", "limit_items_per_page": "S·ªë m·ª•c hi·ªÉn th·ªã tr√™n m·ªói trang (ph√¢n trang)",
    "cpu": "CPU", "ram": "B·ªô nh·ªõ RAM", "disk": "·ªî ƒëƒ©a", "gpu": "Card ƒë·ªì h·ªça", "mainboard": "Bo m·∫°ch ch·ªß", "network": "M·∫°ng", "printers": "M√°y in", "os": "H·ªá ƒëi·ªÅu h√†nh",
    "system_id": "M√£ h·ªá th·ªëng", "event_log": "Log h·ªá th·ªëng", "users": "Ng∆∞·ªùi d√πng", "credentials": "Th√¥ng tin ƒëƒÉng nh·∫≠p", "services": "D·ªãch v·ª• ƒëang ch·∫°y", "startup": "Ch∆∞∆°ng tr√¨nh kh·ªüi ƒë·ªông",
    "software": "Ph·∫ßn m·ªÅm ƒë√£ c√†i", "processes": "Ti·∫øn tr√¨nh", "web_history": "L·ªãch s·ª≠ tr√¨nh duy·ªát"
}

class ConfigEditor(ttk.Frame):
    # L·ªõp n√†y kh√¥ng c·∫ßn thay ƒë·ªïi
    def __init__(self, master, config_path):
        super().__init__(master, padding=(10, 10))
        self.master = master
        self.master.title(f"üõ†Ô∏è Config Editor - {os.path.basename(config_path)}")
        self.config = configparser.ConfigParser()
        self.tk_vars = {}
        self.config_path = config_path
        self.load_config()
        self.create_widgets()

    def load_config(self):
        try:
            self.config.read(self.config_path, encoding='utf-8')
        except configparser.Error as e:
            messagebox.showerror("L·ªói ƒë·ªçc file Config", f"Kh√¥ng th·ªÉ ƒë·ªçc file c·∫•u h√¨nh:\n{e}")
            self.master.destroy()

    def create_widgets(self):
        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=1)
        self.columnconfigure(2, weight=1)
        main_sections = ["server", "client", "webserver"]
        for i, section_name in enumerate(main_sections):
            row = 0; col = i
            group = ttk.LabelFrame(self, text=section_name.capitalize(), padding=(10, 5))
            group.grid(row=row, column=col, padx=5, pady=5, sticky="nsw")
            group.columnconfigure(1, weight=1)
            if self.config.has_section(section_name) and self.config.items(section_name):
                for i, (key, value) in enumerate(self.config[section_name].items()):
                    label = ttk.Label(group, text=DISPLAY_NAMES.get(key, key), wraplength=180)
                    label.grid(row=i, column=0, sticky="w", pady=2, padx=5)
                    var = tk.StringVar(value=value)
                    entry = ttk.Entry(group, textvariable=var, width=15)
                    entry.grid(row=i, column=1, sticky="w", padx=5)
                    if key in IMMUTABLE_KEYS and value == IMMUTABLE_VALUE: entry.config(state="disabled")
                    self.tk_vars[(section_name, key)] = var
            else:
                placeholder = ttk.Label(group, text="(Kh√¥ng c√≥ c·∫•u h√¨nh)", style="Placeholder.TLabel")
                placeholder.grid(row=0, column=0, columnspan=2, padx=10, pady=10, sticky="w")

        audit_group = ttk.LabelFrame(self, text="Audit Modules", padding=(10, 5))
        audit_group.grid(row=1, column=0, columnspan=3, padx=5, pady=5, sticky="ew")
        if self.config.has_section("audit_modules") and self.config.items("audit_modules"):
            audit_keys = list(self.config["audit_modules"].keys())
            for i, key in enumerate(audit_keys):
                text = DISPLAY_NAMES.get(key, key)
                var = tk.BooleanVar(value=self.config.getboolean("audit_modules", key))
                checkbox = ttk.Checkbutton(audit_group, text=text, variable=var)
                checkbox.grid(row=i // 5, column=i % 5, sticky="w", padx=5, pady=2)
                self.tk_vars[("audit_modules", key)] = var
        else:
            placeholder = ttk.Label(audit_group, text="(Kh√¥ng c√≥ c·∫•u h√¨nh)", style="Placeholder.TLabel")
            placeholder.pack(padx=10, pady=10, anchor="w")

        save_btn = ttk.Button(self, text="üíæ L∆∞u c·∫•u h√¨nh", command=self.save_config, style="Accent.TButton")
        save_btn.grid(row=2, column=1, pady=20, sticky="")

    def save_config(self):
        for (section, key), var in self.tk_vars.items():
            if not self.config.has_section(section): self.config.add_section(section)
            value = var.get()
            if isinstance(value, bool): value = str(value).lower()
            if not (key in IMMUTABLE_KEYS and self.config.get(section, key, fallback=None) == IMMUTABLE_VALUE):
                 self.config[section][key] = str(value)
        try:
            with open(self.config_path, "w", encoding="utf-8") as f: self.config.write(f)
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ l∆∞u file {os.path.basename(self.config_path)} th√†nh c√¥ng!")
        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"L·ªói khi l∆∞u file: {e}")

def is_valid_config_file(file_path):
    if not os.path.exists(file_path): return False
    config = configparser.ConfigParser()
    try: config.read(file_path, encoding='utf-8')
    except configparser.Error: return False
    expected_sections = ["server", "client", "webserver", "audit_modules"]
    for section in expected_sections:
        if config.has_section(section) and config.items(section): return True
    return False

# --- KH·ªêI KH·ªûI CH·∫†Y CH√çNH (ƒê√É S·ª¨A L·ªñI) ---
if __name__ == "__main__":
    config_path = "config.ini"
    
    # B∆Ø·ªöC 1: T·∫°o m·ªôt c·ª≠a s·ªï root duy nh·∫•t ngay t·ª´ ƒë·∫ßu
    root = tk.Tk()
    # B∆Ø·ªöC 2: ·∫®n n√≥ ƒëi trong khi ki·ªÉm tra file
    root.withdraw() 

    if not is_valid_config_file(config_path):
        if os.path.exists(config_path):
            messagebox.showwarning("File kh√¥ng h·ª£p l·ªá", f"File '{os.path.basename(config_path)}' kh√¥ng c√≥ n·ªôi dung h·ª£p l·ªá.\nVui l√≤ng ch·ªçn m·ªôt file config kh√°c.")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y file config.ini. Vui l√≤ng ch·ªçn file.")
        
        while True:
            selected_file = filedialog.askopenfilename(title="Ch·ªçn file config.ini", filetypes=[("INI files", "*.ini"), ("All files", "*.*")])
            if not selected_file:
                messagebox.showwarning("H·ªßy b·ªè", "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn. Ch∆∞∆°ng tr√¨nh s·∫Ω tho√°t.")
                # H·ªßy c·ª≠a s·ªï root duy nh·∫•t v√† tho√°t
                root.destroy()
                sys.exit()
            
            if is_valid_config_file(selected_file):
                config_path = selected_file
                break
            else:
                messagebox.showerror("File kh√¥ng h·ª£p l·ªá", f"File '{os.path.basename(selected_file)}' kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng. Vui l√≤ng ch·ªçn l·∫°i.")
    
    # B∆Ø·ªöC 3: Sau khi ƒë√£ c√≥ file h·ª£p l·ªá, hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï root
    root.deiconify() 
    
    # B∆Ø·ªöC 4: Thi·∫øt l·∫≠p v√† ch·∫°y ·ª©ng d·ª•ng nh∆∞ b√¨nh th∆∞·ªùng tr√™n c·ª≠a s·ªï root ƒë√≥
    root.geometry("1025x535")
    root.resizable(False, False)

    style = ttk.Style(root)
    style.theme_use('clam')
    style.configure("Accent.TButton", foreground="white", background="dodgerblue")
    style.configure("Placeholder.TLabel", font=("TkDefaultFont", 9, "italic"), foreground="gray")

    app = ConfigEditor(master=root, config_path=config_path)
    app.pack(fill="both", expand=True)
    
    root.mainloop()