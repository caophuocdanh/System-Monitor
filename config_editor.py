import sys
import configparser
from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QCheckBox, QVBoxLayout,
    QHBoxLayout, QGroupBox, QPushButton, QMessageBox, QScrollArea, QGridLayout
)
from PySide6.QtCore import Qt

CONFIG_FILE = "config.ini"
IMMUTABLE_KEYS = {"server", "host"}
IMMUTABLE_VALUE = "0.0.0.0"

DISPLAY_NAMES = {
    # server
    "host": "ƒê·ªãa ch·ªâ IP m√† server WebSocket s·∫Ω l·∫Øng nghe (0.0.0.0 = m·ªçi ƒë·ªãa ch·ªâ)",
    "port": "C·ªïng WebSocket ch√≠nh m√† server s·ª≠ d·ª•ng",
    "health_check_port": "C·ªïng ki·ªÉm tra t√¨nh tr·∫°ng server (health-check)",

    # client
    "server": "ƒê·ªãa ch·ªâ WebSocket server m√† client k·∫øt n·ªëi",
    "retry_interval": "Th·ªùi gian gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i n·∫øu m·∫•t k·∫øt n·ªëi (gi√¢y)",
    "refesh_interval": "T·∫ßn su·∫•t g·ª≠i d·ªØ li·ªáu hi·ªáu nƒÉng (gi√¢y)",
    "update_info_interval": "Chu k·ª≥ g·ª≠i l·∫°i th√¥ng tin ƒë·∫ßy ƒë·ªß (gi√¢y)",
    "max_event_log": "S·ªë l∆∞·ª£ng log h·ªá th·ªëng l·∫•y t·ªëi ƒëa",
    "history_limit": "Gi·ªõi h·∫°n s·ªë l·ªãch s·ª≠ tr√¨nh duy·ªát m·ªói profile",

    # webserver
    "clients": "S·ªë client t·ªëi ƒëa hi·ªÉn th·ªã",
    "records": "S·ªë b·∫£n ghi RAM t·∫°m gi·ªØ",
    "database_size": "Dung l∆∞·ª£ng DB t·ªëi ƒëa (MB)",
    "dashboard_refresh_interval": "Chu k·ª≥ c·∫≠p nh·∫≠t dashboard (ms)",
    "server_status_refresh_interval": "Chu k·ª≥ ki·ªÉm tra tr·∫°ng th√°i server (ms)",
    "client_realtime_metrics_interval": "Chu k·ª≥ l·∫•y s·ªë li·ªáu client (ms)",

    # audit_modules
    "cpu": "CPU",
    "ram": "B·ªô nh·ªõ RAM",
    "disk": "·ªî ƒëƒ©a",
    "gpu": "Card ƒë·ªì h·ªça",
    "mainboard": "Bo m·∫°ch ch·ªß",
    "network": "M·∫°ng",
    "printers": "M√°y in",
    "os": "H·ªá ƒëi·ªÅu h√†nh",
    "system_id": "M√£ h·ªá th·ªëng",
    "event_log": "Log h·ªá th·ªëng",
    "users": "Ng∆∞·ªùi d√πng",
    "credentials": "Th√¥ng tin ƒëƒÉng nh·∫≠p",
    "services": "D·ªãch v·ª• ƒëang ch·∫°y",
    "startup": "Ch∆∞∆°ng tr√¨nh kh·ªüi ƒë·ªông",
    "software": "Ph·∫ßn m·ªÅm ƒë√£ c√†i",
    "processes": "Ti·∫øn tr√¨nh",
    "web_history": "L·ªãch s·ª≠ tr√¨nh duy·ªát"
}

class ConfigEditor(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üõ†Ô∏è Config.ini Editor")
        self.setMinimumSize(1000, 700)
        self.config = configparser.ConfigParser()
        self.entries = {}

        self.load_config()
        self.init_ui()

    def load_config(self):
        self.config.read(CONFIG_FILE)

    def init_ui(self):
        main_layout = QVBoxLayout()

        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_container = QWidget()
        scroll_layout = QGridLayout(scroll_container)

        col = 0
        row = 0
        section_order = list(self.config.sections())

        for section in section_order:
            if section == "audit_modules":
                continue

            group = QGroupBox(section.capitalize())
            group_layout = QVBoxLayout()

            for key, value in self.config[section].items():
                hbox = QHBoxLayout()
                label_text = DISPLAY_NAMES.get(key, key)
                label = QLabel(label_text)
                label.setWordWrap(True)
                label.setFixedWidth(200)

                entry = QLineEdit(value)
                entry.setMaximumWidth(100)

                if key in IMMUTABLE_KEYS and value == IMMUTABLE_VALUE:
                    entry.setEnabled(False)

                self.entries[(section, key)] = entry
                hbox.addWidget(label)
                hbox.addWidget(entry)
                hbox.addStretch()
                group_layout.addLayout(hbox)

            group.setLayout(group_layout)
            scroll_layout.addWidget(group, row, col)
            col += 1
            if col > 2:
                col = 0
                row += 1

        # === AUDIT MODULES CHECKBOX ===
        if "audit_modules" in self.config:
            audit_group = QGroupBox("Audit Modules")
            grid = QGridLayout()
            grid.setHorizontalSpacing(10)
            grid.setVerticalSpacing(1)  # gi·∫£m d√≤ng
            grid.setContentsMargins(0, 5, 0, 5)

            audit_keys = list(self.config["audit_modules"].keys())
            for i, key in enumerate(audit_keys):
                text = DISPLAY_NAMES.get(key, key)
                checkbox = QCheckBox(text)
                checkbox.setChecked(self.config["audit_modules"][key].lower() == "true")
                self.entries[("audit_modules", key)] = checkbox
                grid.addWidget(checkbox, i // 5, i % 5)

            audit_group.setLayout(grid)
            scroll_layout.addWidget(audit_group, row + 1, 0, 1, 3)

        scroll.setWidget(scroll_container)
        main_layout.addWidget(scroll)

        # === Save Button ===
        save_btn = QPushButton("üíæ L∆∞u c·∫•u h√¨nh")
        save_btn.clicked.connect(self.save_config)
        main_layout.addWidget(save_btn, alignment=Qt.AlignmentFlag.AlignCenter)

        self.setLayout(main_layout)

    def save_config(self):
        for (section, key), widget in self.entries.items():
            if isinstance(widget, QLineEdit):
                if widget.isEnabled():
                    self.config[section][key] = widget.text()
            elif isinstance(widget, QCheckBox):
                self.config[section][key] = str(widget.isChecked()).lower()

        try:
            with open(CONFIG_FILE, "w", encoding="utf-8") as f:
                self.config.write(f)
            QMessageBox.information(self, "‚úÖ Th√†nh c√¥ng", "ƒê√£ l∆∞u file config.ini th√†nh c√¥ng!")
        except Exception as e:
            QMessageBox.critical(self, "‚ùå L·ªói", f"L·ªói khi l∆∞u: {e}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ConfigEditor()
    window.show()
    sys.exit(app.exec())
